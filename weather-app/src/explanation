<!-- **React Weather App component**


### **1. Imports**
```js
import React, { useState, useEffect, useRef } from 'react';
import './Weather.css';
import search_icon from '../assets/search.png';
import clear_icon from '../assets/clear.png';
import cloud_icon from '../assets/cloud.png';
import rain_icon from '../assets/rain.png';
import snow_icon from '../assets/snow.png';
import drizzle_icon from '../assets/drizzle.png';
import wind_icon from '../assets/wind.png';
import humidity_icon from '../assets/humidity.png';
```
- **React Imports:**
  - `useState` â†’ To store the weather data dynamically.
  - `useEffect` â†’ To fetch default weather data when the component loads.
  - `useRef` â†’ To reference the input field for quick access without re-rendering.
- **CSS Import:** Styles the weather component.
- **Image Imports:** These are used for displaying weather-related icons.

---

### **2. useRef Hook**
```js
const inputRef = useRef();
```
- **Why use `useRef`?**
  - `useRef` creates a reference to the input field.
  - This allows us to get the value of the input field **without causing re-renders**.
  - Instead of using `useState` (which triggers re-renders), `useRef` is **efficient** for accessing DOM elements directly.

---

### **3. useState for Weather Data**
```js
const [weatherData, setWeatherData] = useState(null);
```
- `useState(null)` initializes the weather data as `null`.
- When the weather data is fetched, `setWeatherData` updates it with the new data.
- The component re-renders automatically when `weatherData` changes.

---

### **4. Weather Icons Mapping**
```js
const allIcons = {
    "01d": clear_icon,
    "01n": clear_icon,
    "02d": cloud_icon,
    "02n": cloud_icon,
    "03d": cloud_icon,
    "03n": cloud_icon,
    "04d": drizzle_icon,
    "04n": drizzle_icon,
    "09d": rain_icon,
    "09n": rain_icon,
    "10d": rain_icon,
    "10n": rain_icon,
    "13d": snow_icon,
    "13n": snow_icon,
};
```
- This object maps **OpenWeatherMap API's weather codes** to local icons.
- Example:
  - `"01d"` (clear day) â†’ `clear_icon`
  - `"09d"` (rainy day) â†’ `rain_icon`
- This ensures the correct icon is displayed based on the API response.

---

### **5. Fetching Weather Data**
```js
const search = async (city) => {
    if (city.trim() === "") {
        alert('Please enter a city name');
        return;
    }
    try {
        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${import.meta.env.VITE_APP_ID}`;
        const response = await fetch(url);
        const data = await response.json();
        console.log(data);

        // Get the appropriate icon for the weather condition
        const icon = allIcons[data.weather[0].icon] || clear_icon;

        // Update the state with the fetched weather data
        setWeatherData({
            temperature: Math.floor(data.main.temp),
            location: data.name,
            humidity: data.main.humidity,
            windSpeed: data.wind.speed,
            icon: icon,
        });
    } catch (error) {
        setWeatherData(null);
        console.error(error);
    }
};
```
#### **How it works:**
1. **Takes a city name as input**.
2. **Prevents empty input searches** (`alert` if city is blank).
3. **Fetches weather data from OpenWeatherMap API**.
4. **Extracts useful data** (temperature, location, humidity, wind speed, weather condition).
5. **Updates state (`setWeatherData`)**, which triggers a re-render to display the new data.
6. **Handles errors** by logging them and resetting `weatherData`.

#### **Why use `async/await`?**
- It allows the function to **wait** for the API response before proceeding.
- `fetch(url)` returns a **Promise**, so we use `await` to pause execution until we get the data.

---

### **6. Fetch Default Weather on Mount (`useEffect`)**
```js
useEffect(() => {
    search('Mumbai');
}, []);
```
- **Why use `useEffect`?**
  - It **runs only once when the component mounts** (because the dependency array `[]` is empty).
  - Calls `search('Mumbai')` to **show Mumbai's weather by default**.

---

### **7. JSX (Rendering the UI)**
#### **Search Input**
```js
<div className='search'>
    <input ref={inputRef} type="text" placeholder='search'/>
    <img src={search_icon} alt='search' onClick={() => search(inputRef.current.value)}/>
</div>
```
- `ref={inputRef}` connects the `input` element to `useRef`.
- Clicking the **search icon** calls `search(inputRef.current.value)`, fetching weather data for the entered city.

#### **Weather Display (Conditional Rendering)**
```js
{weatherData ? (
    <>
        <img src={weatherData.icon} className='weather-icon'/>
        <p className='temperature'>{weatherData.temperature}Â°C</p>
        <p className='location'>{weatherData.location}</p>

        <div className='weather-data'>
            <div className='col'>
                <img src={humidity_icon} alt="humidity" />
                <div>
                    <p>{weatherData.humidity}%</p>
                    <span>Humidity</span>
                </div>
            </div>

            <div className='col'>
                <img src={wind_icon} alt="wind" />
                <div>
                    <p>{weatherData.windSpeed} km/hr</p>
                    <span>Wind Speed</span>
                </div>
            </div>
        </div>
    </>
) : null}
```
- **Only renders if `weatherData` exists** (prevents errors).
- Displays:
  - **Weather Icon**
  - **Temperature**
  - **City Name**
  - **Humidity & Wind Speed**

---

### **8. Exporting the Component**
```js
export default Weather;
```
- **Allows this component to be imported and used in other files**.

---

## **Why These Hooks Were Used?**
| Hook        | Purpose |
|-------------|---------|
| `useState`  | Stores and updates weather data dynamically. |
| `useEffect` | Calls `search('Mumbai')` when the component mounts. |
| `useRef`    | References the input field to get its value without re-renders. |

---

## **Summary**
- **Displays weather information** fetched from OpenWeatherMap API.
- **Default city is Mumbai**, loaded using `useEffect`.
- **Uses `useRef` for efficient input handling** (avoiding re-renders).
- **Dynamically updates UI based on fetched weather data**.
- **Maps weather codes to icons** for a visual representation.

This code is a great example of **React hooks, API calls, and UI updates** in action. ðŸš€ -->
